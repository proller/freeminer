cmake_minimum_required(VERSION 2.6)

project(usrsctplib)

include(CheckFunctionExists)
include(CheckStructHasMember)
include(CheckIncludeFile)
include(CMakePushCheckState)

include(CheckTypeSize)

check_type_size("size_t" HAVE_SIZE_T )
check_type_size("ssize_t" HAVE_SSIZE_T)

check_include_file(sys/socket.h HAVE_SYS_SOCKET_H)
check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(sys/queue.h HAVE_SYS_QUEUE_H)
check_include_file(linux/if_addr.h HAVE_LINUX_IF_ADDR_H)
check_include_file(linux/rtnetlink.h HAVE_LINUX_RTNETLINK_H)
check_include_file(netinet/ip_icmp.h HAVE_NETINET_IP_ICMP_H)

check_function_exists("socket" HAVE_SOCKET)
check_function_exists("inet_addr" HAVE_INET_ADDR)

add_definitions(-D__Userspace__ "-D__Userspace_os_${CMAKE_SYSTEM_NAME}")

check_struct_has_member("struct sockaddr" "sa_len" "sys/types.h;sys/socket.h" HAVE_SA_LEN)
if(HAVE_SA_LEN)
    add_definitions(-DHAVE_SA_LEN)
endif()

check_struct_has_member("struct sockaddr_in" "sin_len" "sys/types.h;netinet/in.h" HAVE_SIN_LEN)
if(HAVE_SIN_LEN)
    add_definitions(-DHAVE_SIN_LEN)
endif()

check_struct_has_member("struct sockaddr_in6" "sin6_len" "sys/types.h;netinet/in.h" HAVE_SIN6_LEN)
if(HAVE_SIN6_LEN)
    add_definitions(-DHAVE_SIN6_LEN)
endif()

cmake_push_check_state()
set(CMAKE_REQUIRED_INCLUDES "${CMAKE_SOURCE_DIR}/src/network")
check_struct_has_member("struct sockaddr_conn" "sconn_len" "usrsctplib/usrsctp.h" HAVE_SCONN_LEN)
if(HAVE_SCONN_LEN)
    add_definitions(-DHAVE_SCONN_LEN)
endif()
cmake_pop_check_state()


if (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
    add_definitions(-U__FreeBSD__)
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    add_definitions(-U__APPLE__ -D__APPLE_USE_RFC_2292)
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "DragonFly")
    add_definitions(-U__DragonFly__)
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "NetBSD")
    add_definitions(-U__NetBSD__)
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "OpenBSD")
    add_definitions(-U__OpenBSD__)
endif()


option(SCTP_DEBUG "Provide debug information" 1)
if (SCTP_DEBUG)
	add_definitions(-DSCTP_DEBUG)
endif()

option(INET "Support IPv4 " 1)
if (INET)
	add_definitions(-DINET)
endif()

option(INET6 "Support IPv6 " 1)
if (INET6)
	add_definitions(-DINET6)
endif()


option(SCTP_SIMPLE_ALLOCATOR " " 1)
if (SCTP_SIMPLE_ALLOCATOR)
	add_definitions(-DSCTP_SIMPLE_ALLOCATOR)
endif()

option(SCTP_PROCESS_LEVEL_LOCKS " " 1)
if (SCTP_PROCESS_LEVEL_LOCKS)
	add_definitions(-DSCTP_PROCESS_LEVEL_LOCKS)
endif()

option(SCTP_WITH_NO_CSUM " " 1)
if (SCTP_WITH_NO_CSUM)
	add_definitions(-DSCTP_WITH_NO_CSUM)
endif()

option(SCTP_MBUF_LOGGING " " 0)
if (SCTP_MBUF_LOGGING)
	add_definitions(-DSCTP_MBUF_LOGGING)
endif()

option(SCTP_PACKET_LOGGING " " 0)
if (SCTP_PACKET_LOGGING)
	add_definitions(-DSCTP_PACKET_LOGGING)
endif()

option(SCTP_SO_LOCK_TESTING " " 0)
if (SCTP_SO_LOCK_TESTING)
	add_definitions(-DSCTP_SO_LOCK_TESTING)
endif()

add_definitions(-D_GNU_SOURCE)

include_directories(${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/netinet ${PROJECT_SOURCE_DIR}/netinet6 )

add_library(usrsctp STATIC
netinet6/sctp6_usrreq.c  netinet/sctp_callout.c       netinet/sctp_input.c    netinet/sctp_sha1.c          netinet/sctp_userspace.c  user_mbuf.c
netinet/sctp_asconf.c    netinet/sctp_cc_functions.c  netinet/sctp_output.c   netinet/sctp_ss_functions.c  netinet/sctp_usrreq.c     user_recv_thread.c
netinet/sctp_auth.c      netinet/sctp_crc32.c         netinet/sctp_pcb.c      netinet/sctp_sysctl.c        netinet/sctputil.c        user_socket.c
netinet/sctp_bsd_addr.c  netinet/sctp_indata.c        netinet/sctp_peeloff.c  netinet/sctp_timer.c         user_environment.c
)
